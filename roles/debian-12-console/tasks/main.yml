#----------------------------------------------------------------------------------
# repositories and packages for <==================================================
#----------------------------------------------------------------------------------
- name: Adding security repository
  apt_repository:
    repo: deb http://security.debian.org/debian-security/ bookworm-security main contrib non-free-firmware
    state: present
  tags:
  - install
  - packages

- name: Adding repository
  apt_repository:
    repo: deb http://deb.debian.org/debian/ bookworm main contrib non-free-firmware
    state: present
  tags:
  - install
  - packages

- name: Adding updates repository
  apt_repository:
    repo: deb http://deb.debian.org/debian/ bookworm-updates main contrib non-free-firmware
    state: present
  tags:
  - install
  - packages

- name: Updating packages
  shell: apt-get update -y && apt-get upgrade -y
  ignore_errors: True
  args:
    warn: no
  notify: cleaning_packages_metadata
  tags:
  - install

- name: Installing packages
  package: name={{item}} state=present
  with_items:
  - bash-completion
  - bash
  - console-data
  - coreutils
  - curl
  - debianutils
  - file
  - less
  - mc
  - sed
  - sudo
  - wget
  notify: cleaning_packages_metadata
  tags:
  - install

- name: Removing existing admin directory
  file:
    path: /etc/admin
    state: absent
  tags:
  - install
  - configuration

- name: Removing existing deprecated directory
  file:
    path: /etc/infodavid
    state: absent
  tags:
  - install
  - configuration

- name: Copying configuration
  copy:
    src: files/etc/
    dest: /etc/
    owner: root
    group: root
    mode: 0664
    directory_mode: 0775
  tags:
  - install
  - update

- name: Setting permissions on admin directory
  shell: "chmod 770 /etc/admin"
  ignore_errors: True
  args:
    warn: no
  tags:
  - install
  - update

- name: Setting scripts permissions
  shell: "chmod 770 /etc/admin/*.sh"
  ignore_errors: True
  args:
    warn: no
  tags:
  - install
  - update

- name: Setting sudoers for trusted users
  template:
    src: sudoer.j2
    dest: "/etc/sudoers.d/{{item.name}}"
  with_items: "{{users}}"
  when: item.name | length > 0
  tags:
  - install
  - security

- name: Setting sudoers permissions
  shell: "chmod 660 /etc/sudoers.d/{{item.name}}"
  ignore_errors: True
  args:
    warn: no
  with_items: "{{users}}"
  when: item.name | length > 0
  tags:
  - install
  - update

#----------------------------------------------------------------------------------
# hostname <=======================================================================
#----------------------------------------------------------------------------------
- name: Retrieving hostname
  shell: "hostnamectl hostname"
  register: current_hostname
  ignore_errors: False
  args:
    chdir: /tmp
    warn: no
  tags:
  - install

- name: Displaying current hostname
  debug:
    var: current_hostname
  tags:
  - install

- name: Displaying new hostname
  debug:
    var: new_hostname
  tags:
  - install

- name: Setting a hostname
  hostname:
    name: "{{new_hostname}}"
  when: new_hostname != None and new_hostname != "" and current_hostname.stdout != new_hostname
  tags:
  - install

- name: Setting a hostname in hosts file
  lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.0\.1.*'
    line: "127.0.0.1  localhost {{new_hostname}}"
  when: new_hostname != None and new_hostname != "" and current_hostname.stdout != new_hostname
  tags:
  - install

#----------------------------------------------------------------------------------
# locale <=========================================================================
#----------------------------------------------------------------------------------
- name: Enabling locale
  shell: sed -i 's/^# *\({{locale}}.{{encoding}}\)/\1/' /etc/locale.gen
  args:
    warn: no
  tags:
  - locale

- name: Setting environment configuration
  lineinfile:
    path: /etc/environment
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^LANG=.*$', line: "LANG={{locale}}.{{encoding}}"}
  - {regexp: '^LC_ALL=.*$', line: "LC_ALL={{locale}}.{{encoding}}",}

- name: Enabling locale
  shell: sed -i 's/^# *\({{locale}}.{{encoding}}\)/\1/' /etc/default/locale
  args:
    warn: no
  tags:
  - locale

- name: Generating locales
  shell: locale-gen
  args:
    warn: no
  tags:
  - install
  - locale

- name: Setting default locale
  shell: localectl set-locale LANG={{locale}}.{{encoding}}
  ignore_errors: True
  args:
    warn: no
  tags:
  - install
  - profile
  - locale

#----------------------------------------------------------------------------------
# keymap <=========================================================================
#----------------------------------------------------------------------------------
- name: Downloading keymaps
  get_url:
    url: "{{keymaps_url}}"
    dest: "/tmp/kbd.tar.gz"
    mode: '0770'
  tags:
  - install
  - update
  - locale

- name: Extracting keymaps
  shell: "mkdir /tmp/kbd"
  ignore_errors: True
  args:
    chdir: /tmp
    warn: no
  tags:
  - install
  - update
  - locale

- name: Extracting keymaps
  shell: "tar xzf /tmp/kbd.tar.gz --strip-components=1 -C /tmp/kbd && cp -Rp /tmp/kbd/data/keymaps/* /usr/share/keymaps/ && rm -R /tmp/kbd"
  ignore_errors: False
  args:
    chdir: /tmp
    warn: no
  tags:
  - install
  - update
  - locale

- name: Setting default keymap
  shell: localectl set-keymap fr
  ignore_errors: False
  args:
    warn: no
  tags:
  - install
  - locale

#----------------------------------------------------------------------------------
# profile <========================================================================
#----------------------------------------------------------------------------------
- name: Setting default history size
  lineinfile:
    path: /etc/profile
    regexp: "^HISTSIZE=.*"
    line: "HISTSIZE=50"
  tags:
  - install
  - profile

- name: Adding language settings to profile
  lineinfile:
    path: /etc/profile
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
    create: yes
  with_items:
  - {regexp: '^export\s*LANG=', line: 'export LANG={{locale}}.{{encoding}}'}
  - {regexp: '^export\s*LANGUAGE=', line: 'export LANGUAGE={{locale}}.{{encoding}}'}
  - {regexp: '^export\s*LC_ALL=', line: 'export LC_ALL={{locale}}.{{encoding}}'}
  tags:
  - install
  - profile

#----------------------------------------------------------------------------------
# time zone <======================================================================
#----------------------------------------------------------------------------------
- name: Reconfigure time zone
  shell: timedatectl set-timezone Etc/UTC
  tags:
  - install
  - profile

- name: Update time zone to Etc/UTC
  copy: content="Etc/UTC\n" dest=/etc/timezone owner=root group=root mode=0644
  register: timezone
  tags:
  - install
  - profile

- name: Reconfigure time zone (if changed)
  shell: dpkg-reconfigure -f noninteractive tzdata
  when: timezone.changed
  tags:
  - install
  - profile

#----------------------------------------------------------------------------------
# proxy <==========================================================================
#----------------------------------------------------------------------------------
- name: Echo proxy configuration
  debug: var=proxy
  tags:
  - install
  - proxy

- name: Setting Proxy configuration
  lineinfile:
    path: /etc/profile
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^.*http_proxy=.*$', line: 'export http_proxy={{proxy}}'}
  - {regexp: '^.*https_proxy=.*$', line: 'export https_proxy={{proxy}}'}
  - {regexp: '^.*ftp_proxy=.*$', line: 'export ftp_proxy={{proxy}}'}
  - {regexp: '^.*rsync_proxy=.*$', line: 'export rsync_proxy={{proxy}}'}
  - {regexp: '^.*no_proxy=.*$', line: 'export no_proxy="localhost,127.0.0.1,localaddress,.localdomain,.intranet"'}
  when: proxy|default(None) != None
  tags:
  - install
  - proxy

- name: Deteting Proxy configuration
  lineinfile:
    path: /etc/profile
    backup: no
    regexp: "{{item.regexp}}"
    state: absent
  with_items:
  - {regexp: '^.*http_proxy=.*$'}
  - {regexp: '^.*https_proxy=.*$'}
  - {regexp: '^.*ftp_proxy=.*$'}
  - {regexp: '^.*rsync_proxy=.*$'}
  - {regexp: '^.*no_proxy=.*$'}
  when: proxy|default(None) == None
  tags:
  - install
  - proxy

- name: Setting current proxy
  shell: "{{item}}"
  ignore_errors: True
  args:
    warn: no
  with_items:
  - "export http_proxy={{ lookup('env', 'http_proxy') }}"
  - "export https_proxy={{ lookup('env', 'https_proxy') }}"
  - "export ftp_proxy={{ lookup('env', 'ftp_proxy') }}"
  when: proxy|default(None) != None
  tags:
  - install
  - proxy

#----------------------------------------------------------------------------------
# reboot <=========================================================================
#----------------------------------------------------------------------------------
- name: Reboot the server
  shell: "sleep 4 && reboot"
  async: 1
  poll: 0
  when: new_hostname != None and new_hostname != "" and current_hostname.stdout != new_hostname
  tags:
  - install

- name: Wait for the reboot to complete if there was a change.
  wait_for_connection:
    connect_timeout: 10
    sleep: 5
    delay: 5
    timeout: 300
  when: new_hostname != None and new_hostname != "" and current_hostname.stdout != new_hostname
  tags:
  - install

#----------------------------------------------------------------------------------
# packages <=======================================================================
#----------------------------------------------------------------------------------
- name: Updating packages
  shell: apt-get update -y && apt-get upgrade -y
  ignore_errors: True
  args:
    warn: no
  notify: cleaning_packages_metadata
  tags:
  - install

- name: Removing packages
  package: name={{item}} state=absent
  ignore_errors: True
  with_items:
  - alsa-topology-conf
  - alsa-ucm-conf
  - aspell
  - bluetooth
  - ispell
  - vim
  - wireless-regdb
  - wireless-tools
  - wpasupplicant
  tags:
  - install

- name: Removing packages
  package: name={{item}} state=absent
  ignore_errors: True
  when: not secured
  with_items:
  - apparmor-utils
  - fail2ban
  - sshguard
  - ufw
  tags:
  - install

- name: Installing packages
  package: name={{item}} state=present
  with_items:
  - bzip2
  - ca-certificates
  - cloud-init
  - cpio
  - cron
  - debianutils
  - e2fsprogs
  - fdisk
  - findutils
  - gpg-agent
  - gpg-wks-client
  - gpg-wks-server
  - gpg
  - gpgconf
  - gpgsm
  - gpgv
  - grep
  - gzip
  - hostname
  - iperf3
  - iproute2
  - iputils-ping
  - logrotate
  - logtail
  - mailutils-common
  - mailutils
  - ncurses-base
  - ncurses-bin
  - net-tools
  - ntp
  - openssh-client
  - openssh-server
  - openssh-sftp-server
  - openssl
  - psmisc
  - rsync
  - screen
  - software-properties-common
  - sshpass
  - tar
  - tree
  - util-linux-extra
  - util-linux-locales
  - unzip
  - vim-common
  - vim-runtime
  - vim-tiny
  - whois
  notify: cleaning_packages_metadata
  tags:
  - install

- name: Installing packages
  package: name={{item}} state=present
  when: secured
  with_items:
  - apparmor-utils
  - ca-certificates
  - fail2ban
  - logcheck
  - rkhunter
  - sshguard
  - ufw
  notify: cleaning_packages_metadata
  tags:
  - install

- name: Check if firehol.sh exists
  stat:
    path: /etc/admin/firehol.sh
  register: firehol_stat

- name: Adding link on firehol.sh to cron.weekly
  file:
    src: /etc/admin/firehol.sh
    dest: /etc/cron.weekly/firehol.sh
    state: link
  when: secured and firehol_stat.stat.exists
  tags:
  - install
  - security
  - firewall

- name: Create systemd service for firehol.sh
  template:
    src: systemd.service.j2
    dest: /etc/systemd/system/firehol.service
  vars:
    service_name: firehol
    service_command: /etc/admin/firehol.sh

- name: Enabling firehol service
  systemd: enabled=yes state=started daemon_reload=yes name=firehol
  tags:
  - install
  - firewall
  when: secured and firehol_stat.stat.exists

- name: Check if ipblock.sh exists
  stat:
    path: /etc/admin/ipblock.sh
  register: ipblock_stat

- name: Adding link on ipblock.sh to cron.weekly
  file:
    src: /etc/admin/ipblock.sh
    dest: /etc/cron.weekly/ipblock.sh
    state: link
  when: secured and ipblock_stat.stat.exists
  tags:
  - install
  - security
  - firewall

- name: Create systemd service for ipblock.sh
  template:
    src: systemd.service.j2
    dest: /etc/systemd/system/ipblock.service
  vars:
    service_name: ipblock
    service_command: /etc/admin/ipblock.sh

- name: Enabling ipblock service
  systemd: enabled=yes state=started daemon_reload=yes name=ipblock
  tags:
  - install
  - firewall
  when: secured and ipblock_stat.stat.exists

- name: Copying fail2ban configuration
  copy:
    src: files/etc/fail2ban
    dest: /etc/
    owner: root
    group: root
    mode: 0664
    directory_mode: 0775
  when: secured
  tags:
  - install
  - security
  - firewall

- name: Setting permissions on fail2ban directory
  shell: "chmod 775 /etc/fail2ban"
  ignore_errors: True
  args:
    warn: no
  when: secured
  tags:
  - install
  - security
  - firewall

- name: Setting sshguard configuration
  lineinfile:
    path: /etc/sshguard/sshguard.conf
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^THRESHOLD.*$', line: 'THRESHOLD=10'}
  - {regexp: '^BLOCK_TIME.*$', line: 'BLOCK_TIME=900'}
  when: secured
  tags:
  - install
  - security
  - firewall

- name: Checking if sshguard backend library exists in /usr/lib
  stat:
    path: /usr/lib/sshg-fw-{{firewall}}
  register: sshg_lib_result
  when: secured
  tags:
  - install
  - security
  - firewall

- name: Checking if sshguard backend library exists in /usr/libexec
  stat:
    path: /usr/libexec/sshg-fw-{{firewall}}
  register: sshg_libexec_result
  when: secured
  tags:
  - install
  - security
  - firewall

- name: Setting sshguard backend configuration
  lineinfile:
    path: /etc/sshguard.conf
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^BACKEND.*$', line: 'BACKEND="/usr/lib/sshg-fw-{{firewall}}"'}
  when: secured and sshg_lib_result.stat.exists
  tags:
  - install
  - security
  - firewall

- name: Setting sshguard backend configuration
  lineinfile:
    path: /etc/sshguard.conf
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^BACKEND.*$', line: 'BACKEND="/usr/libexec/sshg-fw-{{firewall}}"'}
  when: secured and sshg_libexec_result.stat.exists
  tags:
  - install
  - security
  - firewall

- name: Setting fail2ban configuration
  lineinfile:
    path: /etc/fail2ban/fail2ban.conf
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^dbpurgeage.*$', line: 'dbpurgeage = 7d'}
  when: secured
  tags:
  - install
  - security
  - firewall

- name: Copying logcheck configuration
  copy:
    src: files/etc/logcheck
    dest: /etc/
    owner: root
    group: root
    mode: 0664
    directory_mode: 0775
  when: secured
  tags:
  - install
  - security
  - firewall

- name: Setting permissions on logcheck directory
  shell: "chmod 775 /etc/logcheck"
  ignore_errors: True
  args:
    warn: no
  tags:
  - install
  - security
  - firewall

- name: Setting logcheck configuration
  lineinfile:
    path: /etc/logcheck/config
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^SYSADMIN=.*$', line: 'SYSADMIN={{email}}'}
  when: secured
  tags:
  - install
  - security
  - firewall

- name: Setting logcheck ignore configuration
  shell: "find /etc/logcheck/violations.ignore.d/ -name 'logcheck*' -exec ln -sdf {} /etc/logcheck/ignore.d.server/ \\;"
  tags:
  - install
  - security
  - firewall

- name: Setting rkhunter configuration
  lineinfile:
    path: /etc/rkhunter.conf
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '[#]?MIRRORS_MODE=.*$', line: 'MIRRORS_MODE=0'}
  - {regexp: '[#]?UPDATE_MIRRORS=.*$', line: 'UPDATE_MIRRORS=1'}
  - {regexp: '[#]?WEB_CMD=.*$', line: 'WEB_CMD=""'}
  when: secured
  tags:
  - install
  - security
  - firewall

- name: Updating rkhunter
  shell: rkhunter -q --update
  ignore_errors: True
  when: secured
  tags:
  - install
  - security
  - firewall

- name: Installing firewalld package
  package: name={{item}} state=present
  with_items:
  - firewalld
  notify: cleaning_packages_metadata
  when: firewall == "firewalld"
  tags:
  - install
  - firewall

- name: Enabling firewall service
  systemd: enabled=yes state=started daemon_reload=yes name=firewalld
  tags:
  - install
  - firewall
  when: secured and firewall == "firewalld"

- name: Setting firewall rule for SSH (firewalld)
  shell: firewall-cmd --permanent --zone=public --add-port={{ssh_port}}/tcp
  args:
    warn: no
  when: secured and firewall == "firewalld"
  tags:
  - install
  - firewall

- name: Setting firewall rules (firewalld)
  shell: firewall-cmd --permanent --zone=public --add-port={{item.port}}/{{item.proto}}
  args:
    warn: no
  with_items: "{{firewall_items}}"
  when: secured and firewall == "firewalld" and (item.port > 0) and (item.proto | length > 0)
  tags:
  - install
  - firewall

- name: Allow multicast traffic (firewalld)
  shell: firewall-cmd --permanent --add-service=samba && firewall-cmd --permanent --add-protocol=igmp && firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 10 -d 239.255.255.250 -j ACCEPT && firewall-cmd --reload
  when: secured and firewall == "firewalld"
  tags:
  - install
  - firewall

- name: Installing iptables package
  package: name={{item}} state=present
  with_items:
  - iptables
  notify: cleaning_packages_metadata
  when: secured and firewall == "iptables"
  tags:
  - install
  - firewall

- name: Enabling firewall service
  systemd: enabled=yes state=started daemon_reload=yes name=iptables
  tags:
  - install
  - firewall
  when: secured and firewall == "iptables"

- name: Setting firewall rule for SSH (iptables)
  shell: if [[ $(/sbin/iptables -L|grep dpt:{{ssh_port}}|wc -l) -eq "0" ]]; then /sbin/iptables -I INPUT -p tcp --dport {{ssh_port}} -j ACCEPT && /sbin/service iptables save; fi
  when: secured and firewall == "iptables"
  tags:
  - install
  - firewall

- name: Setting firewall rules (iptables)
  shell: if [[ $(/sbin/iptables -L|grep dpt:{{item.port}}|wc -l) -eq "0" ]]; then /sbin/iptables -I INPUT -p {{item.proto}} --dport {{item.port}} -j ACCEPT && /sbin/service iptables save; fi
  with_items: "{{firewall_items}}"
  when: secured and firewall == "iptables" and (item.port > 0) and (item.proto | length > 0)
  tags:
  - install
  - firewall

- name: Installing ufw package
  package: name={{item}} state=present
  with_items:
  - iptables
  - ufw
  notify: cleaning_packages_metadata
  when: secured and firewall == "ufw"
  tags:
  - install
  - firewall

- name: Enabling firewall service
  systemd: enabled=yes state=started daemon_reload=yes name=ufw
  tags:
  - install
  - firewall
  when: secured and firewall == "ufw"

- name: Setting ufw rule for SSH on public zone
  shell: ufw allow {{ssh_port}}/tcp
  args:
    warn: no
  when: secured and firewall == "ufw"
  tags:
  - install
  - firewall

- name: Setting ufw rules on public zone
  shell: ufw allow {{item.port}}/{{item.proto}}
  args:
    warn: no
  with_items: "{{firewall_items}}"
  when: secured and firewall == "ufw" and (item.port > 0) and (item.proto | length > 0)
  tags:
  - install
  - firewall

- name: Enabling firewall service
  systemd: enabled=yes state=restarted daemon_reload=yes name=firewalld
  tags:
  - install
  - firewall
  when: secured and firewall == "firewalld"

- name: Enabling firewall service
  systemd: enabled=yes state=restarted daemon_reload=yes name=ufw
  tags:
  - install
  - firewall
  when: secured and firewall == "ufw"

- name: Enabling firewall service
  shell: "echo 'y' | sudo ufw enable"
  tags:
  - install
  - firewall
  when: secured and firewall == "ufw"

- name: Display firewall rules
  command: ufw status numbered
  register: ufw_status_output
  when: secured and firewall == "ufw"
  tags:
  - install
  - firewall

- name: Display firewall rules
  debug:
    msg: "{{ufw_status_output.stdout}}"
  when: secured and firewall == "ufw"
  tags:
  - install
  - firewall

- name: Enabling firewall service
  systemd: enabled=yes state=restarted daemon_reload=yes name=iptables
  tags:
  - install
  - firewall
  when: secured and firewall == "iptables"
#----------------------------------------------------------------------------------
# logrotate <======================================================================
#----------------------------------------------------------------------------------
- name: Setting logrotate
  replace:
    path: /etc/logrotate.conf
    regexp: "{{item.regexp}}"
    replace: "{{item.replace}}"
    backup: no
  with_items:
  - {regexp: '^(\s*)rotate\s*.*$', replace: '\1rotate {{logrotate_rotate}}'}
  - {regexp: '^(\s*)maxage\s*.*$', replace: '\1maxage {{logrotate_maxage}}'}
  - {regexp: '^(\s*)size\s*.*$', replace: '\1size {{logrotate_size}}'}
  tags:
  - logrotate

- name: Setting logrotate
  lineinfile:
    path: /etc/logrotate.conf
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^rotate\s*.*$', line: 'rotate {{logrotate_rotate}}'}
  - {regexp: '^maxage\s*.*$', line: 'maxage {{logrotate_maxage}}'}
  - {regexp: '^size\s*.*$', line: 'size {{logrotate_size}}'}
  - {regexp: '^compress$', line: 'compress'}
  tags:
  - logrotate

- name: Find files inside logrotate.d directory
  find:
    paths: "/etc/logrotate.d/"
    patterns: "*"
  register: logrotate_files

- name: Replace rotate values
  replace:
    path: "{{item.path}}"
    regexp: '^(\s*)rotate\s*.*$'
    replace: '\1rotate {{logrotate_rotate}}'
  with_items: "{{logrotate_files.files}}"
  when: item.path | length > 0

- name: Replace maxage values
  replace:
    path: "{{item.path}}"
    regexp: '^(\s*)maxage\s*.*$'
    replace: '\1maxage {{logrotate_maxage}}'
  with_items: "{{logrotate_files.files}}"
  when: item.path | length > 0

- name: Replace size values
  replace:
    path: "{{item.path}}"
    regexp: '^size\s*.*$'
    replace: 'size {{logrotate_size}}'
  with_items: "{{logrotate_files.files}}"
  when: item.path | length > 0

#----------------------------------------------------------------------------------
# mail <===========================================================================
#----------------------------------------------------------------------------------
- name: Setting aliases
  lineinfile:
    path: /etc/aliases
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^root:.*$', line: 'root: {{email}}'}
  - {regexp: '^default:.*$', line: 'default: {{email}}'}
  when: email != ""
  tags:
  - install
  - mail

- name: Installing msmtp package
  package: name={{item}} state=present
  with_items:
  - msmtp
  - msmtp-mta
  notify: cleaning_packages_metadata
  when: mail == "msmtp"
  tags:
  - install
  - mail

- name: Install msmtp configuration file
  template:
    src: msmtprc.j2
    dest: "/etc/msmtprc"
  when: mail == "msmtp"
  tags:
  - install
  - mail

#----------------------------------------------------------------------------------
# users <=========================================================================
#----------------------------------------------------------------------------------
- name: Creating users
  user:
    name: "{{item.name}}"
    groups: "{{item.group}}"
    password: "{{item.password}}"
    home: "{{item.home}}"
    state: present
    createhome: yes
    append: yes
  with_items: "{{users}}"
  when: (item.name | length > 0) and (item.group | length > 0) and (item.password | length > 0) and (item.home | length > 0)
  tags:
  - install
  - users

- name: Updating permissions on homes
  file:
    path: "{{item.home}}"
    mode: u+rwX,g-rwx,o-rwx
    recurse: yes
  with_items: "{{users}}"
  when: item.home | length > 0
  tags:
  - install
  - users

#----------------------------------------------------------------------------------
# SSH <============================================================================
#----------------------------------------------------------------------------------
- name: Setting sshd configuration
  lineinfile:
    path: /etc/ssh/sshd_config
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^#?AllowTcpForwarding\s*.*$', line: 'AllowTcpForwarding yes'}
  - {regexp: '^#?PermitTunnel\s*.*$', line: 'PermitTunnel yes'}
  - {regexp: '^#?PermitRootLogin\s*.*$', line: 'PermitRootLogin no'}
  - {regexp: '^#?Port\s*.*$', line: 'Port {{ssh_port}}'}
  - {regexp: '^#?StrictModes\s*.*$', line: 'StrictModes yes'}
  - {regexp: '^#?LoginGraceTime\s*.*$', line: 'LoginGraceTime 2m'}
  - {regexp: '^#?MaxAuthTries\s*.*$', line: 'MaxAuthTries 2'}
  - {regexp: '^#?MaxSessions\s*.*$', line: 'MaxSessions 3'}
  - {regexp: '^#?ChallengeResponseAuthentication\s*.*$', line: 'ChallengeResponseAuthentication no'}
  - {regexp: '^#?X11Forwarding\s*.*$', line: 'X11Forwarding no'}
  - {regexp: '^Subsystem\s*sftp.*$', line: 'Subsystem sftp internal-sftp'}
  tags:
  - install
  - ssh

- name: Enabling and restart services
  systemd: enabled=yes state=restarted daemon_reload=yes name={{item}}
  with_items:
  - sshd
  tags:
  - install
  - ssh

#----------------------------------------------------------------------------------
# cockpit <========================================================================
#----------------------------------------------------------------------------------
- name: Installing backports repository
  shell: '. /etc/os-release && echo "deb http://deb.debian.org/debian ${VERSION_CODENAME}-backports main">/etc/apt/sources.list.d/backports.list'
  ignore_errors: False
  register: results
  args:
    chdir: /tmp
    warn: no
  when: not secured
  tags:
  - install

- name: Display output
  debug:
    var: results
  when: not secured
  tags:
  - install

- name: Installing cockpit repository
  shell: 'curl --connect-timeout 5 -sSL https://repo.45drives.com/setup|bash'
  ignore_errors: True
  register: results
  args:
    chdir: /tmp
    warn: no
  when: not secured
  tags:
  - install

- name: Display output
  debug:
    var: results
  when: not secured
  tags:
  - install

- name: Updating repositories
  shell: apt-get update -y
  ignore_errors: True
  args:
    warn: no
  when: not secured
  notify: cleaning_packages_metadata
  tags:
  - install

- name: Installing cockpit packages
  package: name={{item}} state=present
  with_items:
  - cockpit
  - cockpit-file-sharing
  - cockpit-identities
  - cockpit-navigator
  - cockpit-sosreport
  notify: cleaning_packages_metadata
  when: not secured
  tags:
  - install

- name: Uninstalling cockpit packages
  package: name={{item}} state=absent
  ignore_errors: True
  with_items:
  - cockpit
  - cockpit-file-sharing
  - cockpit-identities
  - cockpit-navigator
  - cockpit-sosreport
  - nfs-common
  - nfs-kernel-server
  - rpcbind
  - wpasupplicant
  - x11-common
  - xdg-user-dirs
  notify: cleaning_packages_metadata
  when: secured
  tags:
  - install
#----------------------------------------------------------------------------------
# finalize <=======================================================================
#----------------------------------------------------------------------------------
- name: Removing broken links
  shell: "find /etc -xtype l -exec rm {} \\;"
  ignore_errors: True
  args:
    warn: no
  tags:
  - install

- name: Removing unused packages
  shell: apt -y auto-remove
  ignore_errors: True
  args:
    warn: no
  tags:
  - install

- name: Enabling and restart services
  systemd: enabled=yes state=restarted daemon_reload=yes name={{item}}
  with_items:
  - sshd
  - cron
  tags:
  - always
