- name: Copying configuration
  copy:
    src: files/etc/
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  tags:
  - install
  - update

- name: Setting scripts permissions
  shell: "chmod 777 /etc/admin/*.sh"
  ignore_errors: True
  args:
    warn: no
  tags:
  - install
  - update

- name: Updating packages
  shell: apt-get update -y && apt-get upgrade -y
  when: ansible_distribution == 'Debian'
  ignore_errors: True
  args:
    warn: no
  notify: cleaning_packages_metadata
  tags:
  - install
  - update

- name: Installing packages
  package: name={{item}} state=present
  when: ansible_distribution == 'Debian'
  with_items:
  - ansible
  - curl
  - git
  - jq
  notify: cleaning_packages_metadata
  tags:
  - install
  - update

- name: Checking if xoa is already installed
  stat:
    path: /opt/xen-orchestra
  register: xen_orchestra_directory
  tags:
  - install
  - update

- name: Ensuring group xoa exists
  group:
    name: xoa
    state: present
  tags:
  - install
  - update

- name: Checking if xoa is already registered in sudoers.d
  stat:
    path: /etc/sudoers.d/xoa
  register: xoa_sudoers_file
  tags:
  - install
  - update

- name: Adding the xoa user
  user:
    name: xoa
    shell: /bin/bash
    home: /home/xoa
    comment: xen-orchestra user
    uid: 1040
    groups: xoa,users
    append: yes
  when: not xoa_sudoers_file.stat.exists
  tags:
  - install
  - update

- name: Registering xoa in sudoers.d
  file:
    path: /etc/sudoers.d/xoa
    owner: root
    group: root
    mode: '0640'
  when: not xoa_sudoers_file.stat.exists
  tags:
  - install
  - update

- name: Allowing xoa to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers.d/xoa
    state: present
    regexp: '^%xoa'
    line: '%xoa ALL=(ALL) NOPASSWD: ALL'
  tags:
  - install
  - update

- name: Setting git user email
  git_config:
    name: user.email
    scope: global
    value: "{{git_email}}"
  tags:
  - install
  - update

- name: Setting git user
  git_config:
    name: user.name
    scope: global
    value: "{{git_user}}"
  tags:
  - install
  - update

- name: Downloading installation script
  get_url:
    url: "{{xoa_install_url}}"
    dest: "/tmp/{{xoa_install_script}}"
    mode: '0770'
  when: not xen_orchestra_directory.stat.exists
  tags:
  - install
  - update

- name: Downloading update script
  get_url:
    url: "{{xoa_update_url}}"
    dest: "/home/xoa/{{xoa_update_script}}"
    mode: '0770'
  tags:
  - install
  - update

- name: Creating symbolic link to
  file:
    src: "/home/xoa/{{xoa_update_script}}"
    dest: "/etc/cron.weekly/{{xoa_update_script}}"
    state: link
  tags:
  - install
  - update

- name: Removing existing data structures
  shell: "rm -R /var/lib/xo-server"
  ignore_errors: True
  args:
    warn: no
  when: not xen_orchestra_directory.stat.exists
  tags:
  - install

- name: Removing existing data structures
  shell: "rm -R /var/lib/xo-updater"
  ignore_errors: True
  args:
    warn: no
  when: not xen_orchestra_directory.stat.exists
  tags:
  - install

- name: Removing existing redis data
  shell: "redis-cli -n 0 FLUSHALL"
  ignore_errors: True
  args:
    warn: no
  when: not xen_orchestra_directory.stat.exists
  tags:
  - install

- name: Installing
  shell: "/tmp/{{xoa_install_script}}"
  ignore_errors: False
  args:
    warn: no
  when: not xen_orchestra_directory.stat.exists
  tags:
  - install
  - update

- name: Updating
  shell: "/home/xoa/{{xoa_update_script}} -n stable"
  ignore_errors: False
  args:
    warn: no
  when: xen_orchestra_directory.stat.exists
  tags:
  - install
  - update

- name: Installing xo-cli
  shell: "npm install -g xo-cli"
  ignore_errors: False
  args:
    warn: no
  tags:
  - add-servers
  - install
  - update

- name: Rebuilding the xo-web
  shell: "yarn build"
  ignore_errors: False
  args:
    chdir: /opt/xen-orchestra/packages/xo-web/src/xo-app
    warn: no
  when: xen_orchestra_directory.stat.exists
  tags:
  - install
  - update

- name: Starting service
  systemd: enabled=yes state=restarted daemon_reload=yes name={{item}}
  with_items:
  - xo-server
  tags:
  - install
  - update

- name: Waiting for port 80 to become open on the host, don't start checking for 10 seconds
  wait_for:
    host: 0.0.0.0
    port: 80
    delay: 10
  tags:
  - install
  - update

- name: Closing existing session using xo-cli
  shell: "xo-cli --unregister"
  ignore_errors: True
  args:
    warn: no
  tags:
  - add-servers
  - install
  - update

- name: Opening session using xo-cli
  shell: "xo-cli --register --au http://127.0.0.1 {{xoa_default_user}} {{xoa_default_password}}"
  ignore_errors: False
  args:
    warn: no
  tags:
  - install

- name: Adding user session using xo-cli
  shell: "xo-cli user.create \
    email='{{xoa_user}}' \
    password='{{xoa_password}}' \
    permission='admin'"
  ignore_errors: True
  args:
    warn: no
  tags:
  - install

- name: Getting user id
  shell: "xo-cli user.getAll --json|jq '.[]|select(.email==\"{{xoa_user}}\")|.id'"
  register: xoa_user_id
  tags:
  - always
  - install
  - update

- name: Closing existing session using xo-cli
  shell: "xo-cli --unregister"
  ignore_errors: True
  args:
    warn: no
  tags:
  - add-servers
  - install
  - update

- name: Reopening session using xo-cli
  shell: "xo-cli --register --au http://127.0.0.1 {{xoa_user}} {{xoa_password}}"
  ignore_errors: False
  args:
    warn: no
  tags:
  - add-servers
  - install
  - update

- name: Listing existing servers using xo-cli
  shell: "xo-cli server.getAll --json|jq '.[]|.id'"
  register: server_getall
  ignore_errors: False
  tags:
  - add-remotes
  - install
  - update

- name: Removing servers using xo-cli
  shell: "xo-cli server.remove id={{item.1}}"
  ignore_errors: False
  with_indexed_items: "{{server_getall.stdout_lines}}"
  args:
    warn: no
  tags:
  - add-remotes
  - install
  - update

- name: Adding xcp-ng servers using xo-cli
  shell: "xo-cli server.add \
    label='{{item.label}}' \
    host='{{item.ip}}' \
    username={{xcpng_user}} \
    password='{{xcpng_password}}' \
    autoConnect=true \
    allowUnauthorized=true"
  ignore_errors: False
  with_items: "{{xcpng_servers}}"
  args:
    warn: no
  tags:
  - add-servers
  - install
  - update

- name: Listing existing backup jobs using xo-cli
  shell: "xo-cli backupNg.getAllJobs --json|jq '.[]|.id'"
  register: backupng_getall
  ignore_errors: False
  tags:
  - add-jobs
  - install
  - update

- name: Listing existing metadata backup jobs using xo-cli
  shell: "xo-cli metadataBackup.getAllJobs --json|jq '.[]|.id'"
  register: metadatabackup_getall
  ignore_errors: False
  tags:
  - add-jobs
  - install
  - update

- name: Listing existing schedules using xo-cli
  shell: "xo-cli schedule.getAll --json|jq '.[]|.id'"
  register: schedule_getall
  ignore_errors: False
  tags:
  - add-jobs
  - install
  - update

- name: Removing existing backup jobs using xo-cli
  shell: "xo-cli backupNg.deleteJob id={{item.1}}"
  ignore_errors: False
  with_indexed_items: "{{backupng_getall.stdout_lines}}"
  args:
    warn: no
  tags:
  - add-jobs
  - install
  - update

- name: Removing existing metadata backup jobs using xo-cli
  shell: "xo-cli metadataBackup.deleteJob id={{item.1}}"
  ignore_errors: False
  with_indexed_items: "{{metadatabackup_getall.stdout_lines}}"
  args:
    warn: no
  tags:
  - add-jobs
  - install
  - update

- name: Removing existing schedules using xo-cli
  shell: "xo-cli schedule.delete id={{item.1}}"
  ignore_errors: False
  with_indexed_items: "{{schedule_getall.stdout_lines}}"
  args:
    warn: no
  tags:
  - add-jobs
  - install
  - update

- name: Listing existing remotes using xo-cli
  shell: "xo-cli remote.getAll --json|jq '.[]|.id'"
  register: remote_getall
  ignore_errors: False
  tags:
  - add-remotes
  - install
  - update

- name: Removing remotes using xo-cli
  shell: "xo-cli remote.delete id={{item.1}}"
  ignore_errors: False
  with_indexed_items: "{{remote_getall.stdout_lines}}"
  args:
    warn: no
  tags:
  - add-remotes
  - install
  - update

- name: Adding remotes using xo-cli
  shell: "xo-cli remote.create \
    name='{{item.name}}' \
    url='{{item.url}}'"
  ignore_errors: False
  with_items: "{{xoa_remotes}}"
  args:
    warn: no
  tags:
  - add-remotes
  - install
  - update

- name: Getting remote id using xo-cli
  shell: "xo-cli remote.getAll --json|jq '.[]|select(.name==\"{{xoa_remote_backup}}\")|.id'"
  register: xoa_remote_id
  ignore_errors: False
  tags:
  - add-remotes
  - install
  - update

- name: Getting user id
  shell: "xo-cli user.getAll --json|jq '.[]|select(.email==\"{{xoa_user}}\")|.id'"
  register: xoa_user_id
  tags:
  - always
  - install
  - update

- name: Adding metadata and configuration backup job using xo-cli
  shell: "xo-cli metadataBackup.createJob \
    name=\"{{xoa_metadata_backup.name}}\" \
    remotes='json:{ 
      \"id\": {{xoa_remote_id.stdout}} 
    }' \
    schedules='json:{ 
      \"bavyvq5rapl\": { 
        \"cron\": \"{{xoa_metadata_backup.cron}}\", 
        \"enabled\": true, 
        \"name\": \"{{xoa_metadata_backup.name}} schedule\", 
        \"timezone\": \"{{xoa_time_zone}}\"
      } 
    }' \
    settings='json:{ 
      \"bavyvq5rapl\": { 
        \"retentionPoolMetadata\": {{xoa_metadata_backup.retention}}, 
        \"retentionXoMetadata\": {{xoa_metadata_backup.retention}}
      } 
    }' \
    xoMetadata=true"
  ignore_errors: False
  args:
    warn: no
  tags:
  - add-jobs
  - install
  - update

- name: Listing existing vm using xo-cli
  shell: xo-cli --list-objects type=VM|jq '.[]|.id'|paste -sd ','
  register: vm_getall
  ignore_errors: False
  tags:
  - add-jobs
  - install
  - update

- name: Getting health check sr id
  shell: xo-cli --list-objects type='SR' name_label='{{xoa_health_check_sr}}'|jq '.[]|.id'
  register: xoa_health_check_sr_id
  tags:
  - always
  - install
  - update

- name: Adding rolling snaphosts job using xo-cli
  shell: "xo-cli backupNg.createJob \
    mode=\"full\" \
    name=\"{{xoa_rolling_snaphosts.name}}\" \
    schedules='json:{ 
      \"gbkk1mbemhg\": { 
        \"cron\": \"{{xoa_rolling_snaphosts.cron}}\", 
        \"enabled\": true, 
        \"name\": \"{{xoa_rolling_snaphosts.name}} schedule\", 
        \"timezone\": \"{{xoa_time_zone}}\"
      } 
    }' \
    remotes='json:{ 
      \"id\": {{xoa_remote_id.stdout}} 
    }' \
    settings='json:{
      \"\": {
        \"concurrency\": {{xoa_backup_concurrency}},
        \"nRetriesVmBackupFailures\": {{xoa_backup_retries}},
        \"timeout\": {{xoa_backup_timeout}},
        \"offlineSnapshot\": false,
        \"checkpointSnapshot\": true
      },
      \"gbkk1mbemhg\": {
        \"healthCheckSr\": {{xoa_health_check_sr_id.stdout}},
        \"healthCheckVmsWithTags\": [],
        \"snapshotRetention\": {{xoa_rolling_snaphosts.retention}}
      }
    }' \
    vms='json:{
      \"id\": {
        \"__or\": [ {{vm_getall.stdout}} ] 
      } 
    }'"
  ignore_errors: False
  args:
    warn: no
  tags:
  - add-jobs
  - install
  - update

- name: Adding vm backups job using xo-cli
  shell: "xo-cli backupNg.createJob \
    mode=\"full\" \
    compression=\"zstd\" \
    name=\"{{xoa_vm_backups.name}}\" \
    schedules='json:{ 
      \"fdi73l44ewf\": {
        \"cron\": \"{{xoa_vm_backups.cron}}\", 
        \"enabled\": true,
        \"name\": \"{{xoa_vm_backups.name}} schedule\",
        \"timezone\": \"{{xoa_time_zone}}\"
      }
    }' \
    remotes='json:{ 
      \"id\": {{xoa_remote_id.stdout}} 
    }' \
    settings='json:{
      \"\": {
        \"concurrency\": {{xoa_backup_concurrency}},
        \"nRetriesVmBackupFailures\": {{xoa_backup_retries}},
        \"timeout\": {{xoa_backup_timeout}},
        \"deleteFirst\": {{xoa_backup_delete_first|lower}},
        \"offlineSnapshot\": false,
        \"checkpointSnapshot\": true
      },
      \"fdi73l44ewf\": {
        \"exportRetention\": {{xoa_vm_backups.retention}},
        \"healthCheckSr\": {{xoa_health_check_sr_id.stdout}},
        \"healthCheckVmsWithTags\": []
      }
    }' \
    vms='json:{
      \"id\": {
        \"__or\": [ {{vm_getall.stdout}} ] 
      } 
    }'"
  ignore_errors: False
  args:
    warn: no
  tags:
  - add-jobs
  - install
  - update

- name: Closing session using xo-cli
  shell: "xo-cli --unregister"
  ignore_errors: False
  args:
    warn: no
  tags:
  - add-servers
  - install
  - update

- name: Removing warnings associated with source building
  replace:
    path: /opt/xen-orchestra/packages/xo-web/src/xo-app/index.js
    regexp: "{{item.regexp}}"
    replace: "{{item.replace}}"
    backup: true
  with_items:
  - {regexp: '(this\.displayOpenSourceDisclaimer\(\))', replace: '/* \1 */'}
  - {regexp: '^(.*dismissedSourceBanner:)\s*Boolean.*$', replace: '\1 true,'}
  - {regexp: '^(.*dismissedTrialBanner:)\s*Boolean.*$', replace: '\1 true,'}
  - {regexp: '^(.*registerNeeded:)\s*state\..*$.*$', replace: '\1 false,'}
  when: remove_xoa_source_warnings
  tags:
  - install
  - update

- name: Removing warnings associated with source building in menu
  replace:
    path: /opt/xen-orchestra/packages/xo-web/src/xo-app/menu/index.js
    regexp: "{{item.regexp}}"
    replace: "{{item.replace}}"
    backup: true
  with_items:
  - {regexp: "(\\{\\s*to:.*isAdmin.*'xoa\\/notifications')", replace: '/* \1'}
  - {regexp: "\\},(\\s*.*\\s*to:\\s*'\\/settings\\/servers',\\s*icon:\\s*'menu-settings',)", replace: '},*/ \1'}
  when: remove_xoa_source_warnings
  tags:
  - install
  - update

- name: Rebuilding the xo-web after warnings removal
  shell: "yarn build"
  ignore_errors: False
  args:
    chdir: /opt/xen-orchestra/packages/xo-web/src/xo-app
    warn: no
  when: remove_xoa_source_warnings
  tags:
  - install
  - update

- name: Starting services
  systemd: enabled=yes state=restarted daemon_reload=yes name={{item}}
  with_items:
  - xo-server
  when: remove_xoa_source_warnings
  tags:
  - install
  - update
