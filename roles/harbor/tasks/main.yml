- name: Copying configuration
  copy:
    src: files/etc/
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  tags:
  - install
  - update

- name: Setting scripts permissions
  shell: "chmod 777 /etc/admin/*.sh"
  ignore_errors: True
  args:
    warn: no
  tags:
  - install
  - update

- name: Downloading installer
  shell: "curl -s {{harbor_releases_url}}|grep browser_download_url|cut -d '\"' -f 4 | grep '\\.tgz$' | wget -i -"
  ignore_errors: False
  args:
    chdir: /opt
    warn: no
  tags:
  - install

- name: Decompressing installer
  shell: "tar xvzf harbor-offline-installer*.tgz"
  ignore_errors: False
  args:
    chdir: /opt
    warn: no
  tags:
  - install

- name: Configuring
  shell: "cp /opt/harbor/harbor.yml.tmpl /opt/harbor/harbor.yml"
  ignore_errors: False
  args:
    chdir: /opt
    warn: no
  tags:
  - install

- name: Configuring
  replace:
    path: /opt/harbor/harbor.yml
    regexp: "{{item.regexp}}"
    replace: "{{item.replace}}"
  with_items:
  - {regexp: '^\s*hostname:.*$', replace: "hostname: {{harbor_hostname}}"}
  - {regexp: '^\s*harbor_admin_password:.*$', replace: "harbor_admin_password: {{harbor_admin_password}}"}
  - {regexp: '^(\s*)password:.*$', replace: "/1password: {{harbor_admin_password}}"}
  tags:
  - install

- name: Allowing all access to tcp port 80
  ufw:
    rule: allow
    port: '80'
    proto: tcp

- name: Allowing all access to tcp port 443
  ufw:
    rule: allow
    port: '443'
    proto: tcp

- name: Allowing all access to tcp port 4443 for Notary
  ufw:
    rule: allow
    port: '4443'
    proto: tcp
  when: notary in installation_features|lower

- name: Copying harbor_certs.cnf
  copy:
    src: files/etc/opt/harbor/certs/harbor_certs.cnf
    dest: /opt/harbor/certs/
    owner: root
    group: root
    mode: 0660
  when: ssl_configuration == "self-signed"
  tags:
  - install

- name: Configuring harbor_certs.cnf
  replace:
    path: /opt/harbor/certs/harbor_certs.cnf
    regexp: "{{item.regexp}}"
    replace: "{{item.replace}}"
  with_items:
  - {regexp: '^\s*commonName.*$', replace: "commonName = {{harbor_hostname}}"}
  - {regexp: '^\s*countryName.*$', replace: "countryName = {{ssl_country}}"}
  - {regexp: '^\s*localityName.*$', replace: "localityName = {{ssl_locality}}"}
  - {regexp: '^\s*stateOrProvinceName.*$', replace: "stateOrProvinceName = {{ssl_state_or_province}}"}
  - {regexp: '^\s*organizationName.*$', replace: "organizationName = {{ssl_organization}}"}
  - {regexp: '^\s*emailAddress.*$', replace: "emailAddress = {{ssl_email}}"}
  when: ssl_configuration == "self-signed"
  tags:
  - install

- name: Generating request and key
  shell: "openssl req -out /opt/harbor/certs/harbor_registry.csr -newkey rsa:4096 --sha512 -nodes -keyout /opt/harbor/certs/harbor_registry.key -config /opt/harbor/certs/harbor_certs.cnf"
  ignore_errors: False
  args:
    chdir: /opt/harbor/certs
    warn: no
  when: ssl_configuration == "self-signed"
  tags:
  - install

- name: Generating certificate
  shell: "openssl x509 -in /opt/harbor/certs/harbor_registry.csr -out /opt/harbor/certs/harbor_registry.crt -req -signkey /opt/harbor/certs/harbor_registry.key -days 3650"
  ignore_errors: False
  args:
    chdir: /opt/harbor/certs
    warn: no
  when: ssl_configuration == "self-signed"
  tags:
  - install

- name: Configuring SSL
  replace:
    path: /opt/harbor/harbor.yml
    regexp: "{{item.regexp}}"
    replace: "{{item.replace}}"
  with_items:
  - {regexp: '^(\s*)certificate:.*$', replace: "/1certificate: /opt/harbor/certs/harbor_registry.crt"}
  - {regexp: '^(\s*)private_key:.*$', replace: "/private_key: /opt/harbor/certs/harbor_registry.key"}
  when: ssl_configuration == "self-signed"
  tags:
  - install

- name: Installing cerbot packages
  package: name={{item}} state=present
  when: ansible_distribution == 'Debian' and ssl_configuration == "lets-encrypt"
  with_items:
  - certbot
  notify: cleaning_packages_metadata
  tags:
  - install

- name: Requesting certificate
  shell: "certbot certonly --standalone -d {{harbor_hostname}} --preferred-challenges http --agree-tos  -m {{ssl_email}} --keep-until-expiring"
  ignore_errors: False
  args:
    chdir: /opt/harbor/certs
    warn: no
  when: ssl_configuration == "lets-encrypt"
  tags:
  - install

- name: Configuring SSL
  replace:
    path: /opt/harbor/harbor.yml
    regexp: "{{item.regexp}}"
    replace: "{{item.replace}}"
  with_items:
  - {regexp: '^(\s*)certificate:.*$', replace: "/1certificate: /etc/letsencrypt/live/{{harbor_hostname}}/fullchain.pem"}
  - {regexp: '^(\s*)private_key:.*$', replace: "/private_key: /etc/letsencrypt/live/{{harbor_hostname}}/privkey.pem"}
  when: ssl_configuration == "lets-encrypt"
  tags:
  - install

- name: Preparing
  shell: "bash prepare"
  ignore_errors: False
  args:
    chdir: /opt/harbor
    warn: no
  tags:
  - install

- name: Setting installation with Notary
  set-fact:
    install_arguments: "{{install_arguments}} --with-notary"
  when: notary in installation_features|lower
  tags:
  - install

- name: Setting installation with Chartmuseum
  set-fact:
    install_arguments: "{{install_arguments}} --with-chartmuseum"
  when: chartmuseum in installation_features|lower
  tags:
  - install

- name: Installing
  shell: "bash install.sh {{install_arguments}}"
  ignore_errors: False
  args:
    chdir: /opt/harbor
    warn: no
  tags:
  - install
