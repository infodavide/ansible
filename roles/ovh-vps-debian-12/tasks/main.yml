- name: Copying configuration
  copy:
    src: files/etc/
    dest: /etc/
    owner: root
    group: root
    mode: 0664
    directory_mode: 0775
  tags:
  - install
  - update

- name: Setting permissions on admin directory
  shell: "chmod 770 /etc/admin"
  ignore_errors: True
  args:
    warn: no
  tags:
  - install
  - update

- name: Setting scripts permissions
  shell: "chmod 770 /etc/admin/*.sh"
  ignore_errors: True
  args:
    warn: no
  tags:
  - install
  - update

- name: Copying external files
  copy:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: 0664
    directory_mode: 0775
  with_items: "{{external_files}}"
  when: (item.src | length > 0) and (item.dest | length > 0) and (item.owner | length > 0) and (item.group | length > 0)
  tags:
  - install
  - update
#----------------------------------------------------------------------------------
# containers <=====================================================================
#----------------------------------------------------------------------------------
- name: Copying containers
  unarchive:
    src: "{{item.src}}"
    dest: "{{item.dest}}"
  with_items: "{{containers}}"
  when: (item.src | length > 0) and (item.dest | length > 0)
  tags:
  - install
  - update
  - containers

- name: Setting containers owner
  shell: "chown -R {{item.owner}}:{{item.group}} {{item.dest}}"
  ignore_errors: True
  args:
    warn: no
  with_items: "{{containers}}"
  when: (item.owner | length > 0) and (item.group | length > 0) and (item.dest | length > 0)
  tags:
  - install
  - update
  - containers

- name: Setting containers permissions
  shell: "chmod -R u+rwX,g+rwX,o+rX-w {{item.dest}}"
  ignore_errors: True
  args:
    warn: no
  with_items: "{{containers}}"
  when: item.dest | length > 0
  tags:
  - install
  - update
  - containers

- name: Setting containers permissions
  shell: "chmod 770 {{item.path}}/*.sh"
  ignore_errors: True
  args:
    warn: no
  with_items: "{{containers}}"
  when: item.path | length > 0
  tags:
  - install
  - update
  - containers

- name: Setting containers services
  shell: "find {{item.path}} -name '*.service' -exec ln -sf {} /etc/systemd/system/ \\;"
  ignore_errors: True
  args:
    warn: no
  with_items: "{{containers}}"
  when: item.path | length > 0
  tags:
  - install
  - update
  - containers

- name: Enabling containers services
  systemd: enabled=yes state=restarted daemon_reload=yes name={{item.service}}
  ignore_errors: True
  with_items: "{{containers}}"
  when: item.service | length > 0
  tags:
  - always
#----------------------------------------------------------------------------------
# packages <==========================================================================
#----------------------------------------------------------------------------------
- name: Installing packages
  package: name={{item}} state=present
  with_items:
  - locales-all
  - mariadb-client
  - python3-filelock
  notify: cleaning_packages_metadata
  tags:
  - install
  - nginx
#----------------------------------------------------------------------------------
# nginx <==========================================================================
#----------------------------------------------------------------------------------
- name: Installing nginx package
  package: name={{item}} state=present
  with_items:
  - nginx
  - nginx-extras
  notify: cleaning_packages_metadata
  when: http == "nginx"
  tags:
  - install
  - nginx

- name: Setting nginx configuration
  template:
    src: nginx.conf.j2
    dest: "/etc/nginx/nginx.conf"
  when: http == "nginx"
  tags:
  - install
  - nginx

- name: Setting nginx site configuration
  template:
    src: nginx_website.j2
    dest: "/etc/nginx/sites-available/{{https_domain}}"
  when: http == "nginx"
  tags:
  - install
  - nginx

- name: Creating symbolic link for nginx site configuration
  file:
    src: "/etc/nginx/sites-available/{{https_domain}}"
    dest: "/etc/nginx/sites-enabled/default"
    state: link
  when: http == "nginx"
  tags:
  - install
  - nginx
#----------------------------------------------------------------------------------
# cerbot <==========================================================================
#----------------------------------------------------------------------------------
- name: Installing cerbot packages
  package: name={{item}} state=present
  with_items:
  - python3-acme
  - python3-certbot
  - python3-mock
  - python3-openssl
  - python3-pkg-resources
  - python3-pyparsing
  - python3-zope.interface
  - python3-certbot-nginx
  - python3-certifi
  - certbot
  notify: cleaning_packages_metadata
  when: http == "nginx"
  tags:
  - install
  - nginx

- name: Setting cerbot certificate for domain
  shell: certbot --nginx --keep-until-expiring --agree-tos -m {{email}} --redirect -n -d {{https_domain}} -d {{https_url}}
  ignore_errors: True
  args:
    warn: no
  when: http == "nginx"
  tags:
  - install
  - nginx
#----------------------------------------------------------------------------------
# finalize <=======================================================================
#----------------------------------------------------------------------------------
- name: Enabling and restart services
  systemd: enabled=yes state=restarted daemon_reload=yes name={{item}}
  with_items:
  - cron
  - nginx
  - sshd
  - sshguard
  - ufw
  tags:
  - install

- name: Sending a test email
  shell: "echo 'Test email from host: {{ansible_hostname}}.' | mail -s 'Test email from host: {{ansible_hostname}}' {{email}}"
  ignore_errors: True
  args:
    warn: no
  tags:
  - install
