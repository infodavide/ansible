# tasks file
#----------------------------------------------------------------------------------
# repositories and packages for <==================================================
#----------------------------------------------------------------------------------
- name: Add buster security APT repository
  apt_repository:
    repo: deb http://security.debian.org/debian-security/ bookworm-security main contrib
    state: present
  when: ansible_distribution == 'Debian'
  tags:
  - packages

- name: Add buster APT repository
  apt_repository:
    repo: deb http://deb.debian.org/debian/ bookworm main contrib
    state: present
  when: ansible_distribution == 'Debian'
  tags:
  - packages

- name: Add buster updates APT repository
  apt_repository:
    repo: deb http://deb.debian.org/debian/ bookworm-updates main contrib
    state: present
  when: ansible_distribution == 'Debian'
  tags:
  - packages

- name: Add buster src APT repository
  apt_repository:
    repo: deb-src http://deb.debian.org/debian/ bookworm-updates main contrib
    state: present
  when: ansible_distribution == 'Debian'
  tags:
  - packages

- name: Updating packages
  shell: apt-get update -y && apt-get upgrade -y
  when: ansible_distribution == 'Debian'
  ignore_errors: True
  args:
    warn: no
  notify: cleaning_packages_metadata
  tags:
  - packages

- name: Installing packages
  package: name={{item}} state=present
  when: ansible_distribution == 'Debian'
  with_items: "{{debian_packages}}"
  notify: cleaning_packages_metadata
  tags:
  - packages

- name: Updating packages
  shell: apt-get update -y && apt-get upgrade -y
  when: ansible_distribution == 'Debian'
  ignore_errors: True
  args:
    warn: no
  notify: cleaning_packages_metadata
  tags:
  - packages

#----------------------------------------------------------------------------------
# system <=========================================================================
#----------------------------------------------------------------------------------

#----------------------------------------------------------------------------------
# selinux <========================================================================
#----------------------------------------------------------------------------------

#----------------------------------------------------------------------------------
# locale <=========================================================================
#----------------------------------------------------------------------------------

#----------------------------------------------------------------------------------
# python <=========================================================================
#----------------------------------------------------------------------------------
- name: Getting Python site-packages location
  shell: python3 -c 'import site; print(site.getsitepackages()[0])'
  ignore_errors: True
  register: python_path
  tags:
  - python

#----------------------------------------------------------------------------------
# locale <=========================================================================
#----------------------------------------------------------------------------------
- name: Setting default locale
  lineinfile:
    path: /etc/locale.conf
    regexp: "^LANG="
    line: "LANG=\"{{locale}}\""
  when: ansible_distribution_file_variety == "SUSE"
  tags:
  - profile
  - locale

- name: Enabling locale
  shell: sed -i 's/^# *\({{locale}}.{{encoding}}\)/\1/' /etc/locale.gen
  when: ansible_distribution == 'Debian'
  args:
    warn: no
  tags:
  - locale

- name: Enabling locale
  shell: sed -i 's/^# *\en_US.UTF-8\)/\1/' /etc/locale.gen
  when: ansible_distribution == 'Debian'
  args:
    warn: no
  tags:
  - locale

- name: Generating locales
  when: ansible_distribution == 'Debian'
  shell: locale-gen
  args:
    warn: no
  tags:
  - locale

- name: Setting default locale
  shell: localectl set-locale LANG={{locale}}
  ignore_errors: True
  args:
    warn: no
  tags:
  - profile
  - locale

- name: Setting default keymap
  shell: localectl set-keymap fr
  ignore_errors: True
  args:
    warn: no
  tags:
  - profile
  - locale

#----------------------------------------------------------------------------------
# profile <=========================================================================
#----------------------------------------------------------------------------------
- name: Copying profile.local file
  copy:
    src: files/etc/profile.local
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  tags:
  - profile

- name: Setting default history size
  lineinfile:
    path: /etc/profile
    regexp: "^HISTSIZE=.*"
    line: "HISTSIZE=50"
  tags:
  - profile

- name: Adding language settings to profile
  lineinfile:
    path: /etc/profile
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
    create: yes
  with_items:
  - {regexp: '^export\s*LANG=', line: 'export LANG={{locale}}'}
  - {regexp: '^export\s*LANGUAGE=', line: 'export LANGUAGE={{locale}}'}
  - {regexp: '^export\s*LC_ALL=', line: 'export LC_ALL={{locale}}'}
  tags:
  - profile

- name: Reconfigure time zone
  shell: timedatectl set-timezone Etc/UTC
  when: ansible_distribution == 'Debian'
  tags:
  - profile

- name: Update time zone to Etc/UTC
  copy: content="Etc/UTC\n" dest=/etc/timezone owner=root group=root mode=0644
  register: timezone
  tags:
  - profile

- name: Reconfigure time zone (if changed)
  shell: dpkg-reconfigure -f noninteractive tzdata
  when: ansible_distribution == 'Debian' and timezone.changed
  tags:
  - profile

#----------------------------------------------------------------------------------
# security <=======================================================================
#----------------------------------------------------------------------------------
- name: Copying sudoers for trusted users
  copy:
    src: files/etc/sudoers.d
    dest: /etc/
    owner: root
    group: root
    mode: 0660
  tags:
  - security

#----------------------------------------------------------------------------------
# proxy <==========================================================================
#----------------------------------------------------------------------------------
- name: Echo Proxy configuration
  debug: var=proxy
  tags:
  - proxy

- name: Setting Proxy configuration
  lineinfile:
    path: /etc/profile
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^.*http_proxy=.*$', line: 'export http_proxy={{proxy}}'}
  - {regexp: '^.*https_proxy=.*$', line: 'export https_proxy={{proxy}}'}
  - {regexp: '^.*ftp_proxy=.*$', line: 'export ftp_proxy={{proxy}}'}
  - {regexp: '^.*rsync_proxy=.*$', line: 'export rsync_proxy={{proxy}}'}
  - {regexp: '^.*no_proxy=.*$', line: 'export no_proxy="localhost,127.0.0.1,localaddress,.localdomain,.intranet"'}
  when: proxy|default(None) != None
  tags:
  - proxy

- name: Deteting Proxy configuration
  lineinfile:
    path: /etc/profile
    backup: no
    regexp: "{{item.regexp}}"
    state: absent
  with_items:
  - {regexp: '^.*http_proxy=.*$'}
  - {regexp: '^.*https_proxy=.*$'}
  - {regexp: '^.*ftp_proxy=.*$'}
  - {regexp: '^.*rsync_proxy=.*$'}
  - {regexp: '^.*no_proxy=.*$'}
  when: proxy|default(None) == None
  tags:
  - proxy

- name: Setting current proxy
  shell: "{{item}}"
  ignore_errors: True
  args:
    warn: no
  with_items:
  - "export http_proxy={{ lookup('env', 'http_proxy') }}"
  - "export https_proxy={{ lookup('env', 'https_proxy') }}"
  - "export ftp_proxy={{ lookup('env', 'ftp_proxy') }}"
  when: proxy|default(None) != None
  tags:
  - proxy

#----------------------------------------------------------------------------------
# admin directory and custom scripts <=============================================
#----------------------------------------------------------------------------------
- name: Removing existing admin directory
  file:
    path: /etc/admin
    state: absent
  tags:
  - configuration

- name: Removing existing deprecated directory
  file:
    path: /etc/infodavid
    state: absent
  tags:
  - configuration

- name: Copying admin directory
  copy:
    src: files/etc/admin
    dest: /etc/
    owner: root
    group: root
    mode: 0660
  tags:
  - configuration

- name: Updating permissions on admin directory
  shell: "chmod 770 /etc/admin/*.sh|:"
  ignore_errors: True
  args:
    warn: no
  tags:
  - configuration

- name: Creating cron tasks
  copy:
    src: files/etc/cron.d
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  tags:
  - configuration

- name: Creating monthly cron tasks
  copy:
    src: files/etc/cron.monthly
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  tags:
  - configuration

- name: Creating weekly cron tasks
  copy:
    src: files/etc/cron.weekly
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  tags:
  - configuration

- name: Creating daily cron tasks
  copy:
    src: files/etc/cron.daily
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  tags:
  - configuration

- name: Creating hourly cron tasks
  copy:
    src: files/etc/cron.hourly
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  tags:
  - configuration

- name: Creating boot tasks
  copy:
    src: files/etc/rc.d
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  tags:
  - configuration

#----------------------------------------------------------------------------------
# mail <===========================================================================
#----------------------------------------------------------------------------------
- name: Setting aliases
  lineinfile:
    path: /etc/aliases
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^root:.*$', line: 'root: {{email}}'}
  - {regexp: '^default:.*$', line: 'default: {{email}}'}
  when: email != ""
  tags:
  - mail

- name: Installing msmtp package
  package: name={{item}} state=present
  with_items:
  - msmtp
  - msmtp-mta
  notify: cleaning_packages_metadata
  when: mail == "msmtp"
  tags:
  - mail

- name: Copying msmtprc configuration
  copy:
    src: files/etc/msmtprc
    dest: /etc/
    owner: root
    group: root
    mode: 0660
  when: mail == "msmtp"
  tags:
  - mail

- name: Setting msmtprc configuration
  lineinfile:
    path: /etc/msmtprc
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^from mail_from.*$', line: 'from {{mail_from}}'}
  - {regexp: '^host mail_host.*$', line: 'host {{mail_host}}'}
  - {regexp: '^user mail_user.*$', line: 'user {{mail_user}}'}
  - {regexp: '^password mail_password.*$', line: 'password {{mail_password}}'}
  when: mail == "msmtp"
  tags:
  - mail

#----------------------------------------------------------------------------------
# nginx <==========================================================================
#----------------------------------------------------------------------------------
- name: Installing nginx package
  package: name={{item}} state=present
  with_items:
  - nginx-common
  - nginx-full
  - nginx-extras
  - nginx
  notify: cleaning_packages_metadata
  when: http == "nginx" and ansible_distribution == 'Debian'
  tags:
  - nginx

- name: Copying nginx configuration
  copy:
    src: files/etc/nginx
    dest: /etc
    owner: root
    group: root
    mode: 0664
  when: http == "nginx"
  tags:
  - nginx

#----------------------------------------------------------------------------------
# cerbot <==========================================================================
#----------------------------------------------------------------------------------
- name: Installing cerbot packages
  package: name={{item}} state=present
  with_items:
  - python3-acme
  - python3-certbot
  - python3-mock
  - python3-openssl
  - python3-pkg-resources
  - python3-pyparsing
  - python3-zope.interface
  - python3-certbot-nginx
  - python3-certifi
  - certbot
  notify: cleaning_packages_metadata
  when: http == "nginx"
  tags:
  - nginx

- name: Setting cerbot certificate for domain
  shell: certbot --nginx --keep-until-expiring --agree-tos -m {{email}} --redirect -n -d {{https_domain}} -d {{https_url}}
  ignore_errors: True
  args:
    warn: no
  when: http == "nginx"
  tags:
  - nginx

#----------------------------------------------------------------------------------
# users <=========================================================================
#----------------------------------------------------------------------------------
- name: Creating users
  user:
    name: "{{item.name}}"
    groups: "{{item.group}}"
    password: "{{item.password}}"
    home: "{{item.home}}"
    state: present
    createhome: yes
    append: yes
  with_items: "{{users}}"
  tags:
  - users

- name: Updating permissions on homes
  file:
    path: "{{item.home}}"
    mode: u+rwX,g-rwx,o-rwx
    recurse: yes
  with_items: "{{users}}"
  tags:
  - users

#----------------------------------------------------------------------------------
# SSH <============================================================================
#----------------------------------------------------------------------------------
- name: Setting sshd configuration
  lineinfile:
    path: /etc/ssh/sshd_config
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^AllowTcpForwarding.*$', line: 'AllowTcpForwarding yes'}
  - {regexp: '^PermitTunnel.*$', line: 'PermitTunnel yes'}
  - {regexp: '^PermitRootLogin.*$', line: 'PermitRootLogin no'}
  - {regexp: '^#Port.*$', line: 'Port {{ssh_port}}'}
  - {regexp: '^Port.*$', line: 'Port {{ssh_port}}'}
  tags:
  - ssh

- name: Enabling and restart services
  systemd: enabled=yes state=restarted daemon_reload=yes name={{item}}
  with_items:
  - sshd
  tags:
  - ssh

#----------------------------------------------------------------------------------
# firewall <=======================================================================
#----------------------------------------------------------------------------------
- name: Copying admin directory
  copy:
    src: files/etc/admin
    dest: /etc/
    owner: root
    group: root
    mode: 0660
  tags:
  - firewall

- name: Updating permissions on admin directory
  shell: chmod 770 /etc/admin/*.sh
  args:
    warn: no
  tags:
  - firewall

- name: Creating symbolic link for firehol task
  file:
    src: "/etc/admin/firehol.sh"
    dest: "/etc/cron.daily/firehol.sh"
    state: link
  tags:
  - firewall

- name: Creating symbolic link for ipblock task
  file:
    src: "/etc/admin/ipblock.sh"
    dest: "/etc/cron.daily/ipblock.sh"
    state: link
  tags:
  - firewall

- name: Installing firewalld package
  package: name={{item}} state=present
  with_items:
  - firewalld
  notify: cleaning_packages_metadata
  when: firewall == "firewalld"
  tags:
  - firewall

- name: Enabling firewall service
  systemd: enabled=yes state=started daemon_reload=yes name=firewalld
  tags:
  - firewall
  when: firewall == "firewalld"

- name: Setting firewall rules (firewalld)
  shell: firewall-cmd --permanent --zone=public --add-port={{item.port}}/{{item.proto}}
  args:
    warn: no
  with_items: "{{firewall_items}}"
  when: firewall == "firewalld"
  tags:
  - firewall

- name: Allow multicast traffic (firewalld)
  shell: firewall-cmd --permanent --add-service=samba && firewall-cmd --permanent --add-protocol=igmp && firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 10 -d 239.255.255.250 -j ACCEPT && firewall-cmd --reload
  when: firewall == "firewalld"
  tags:
  - firewall

- name: Installing iptables package
  package: name={{item}} state=present
  with_items:
  - iptables
  notify: cleaning_packages_metadata
  when: firewall == "iptables"
  tags:
  - firewall

- name: Enabling firewall service
  systemd: enabled=yes state=started daemon_reload=yes name=iptables
  tags:
  - firewall
  when: firewall == "iptables"

- name: Setting firewall rules (iptables)
  shell: if [[ $(/sbin/iptables -L|grep dpt:{{item.port}}|wc -l) -eq "0" ]]; then /sbin/iptables -I INPUT -p {{item.proto}} --dport {{item.port}} -j ACCEPT && /sbin/service iptables save; fi
  with_items: "{{firewall_items}}"
  when: firewall == "iptables"
  tags:
  - firewall

- name: Installing ufw package
  package: name={{item}} state=present
  with_items:
  - iptables
  - ufw
  notify: cleaning_packages_metadata
  when: firewall == "ufw"
  tags:
  - firewall

- name: Enabling firewall service
  systemd: enabled=yes state=started daemon_reload=yes name=ufw
  tags:
  - firewall
  when: firewall == "ufw"

- name: Setting ufw rules on public zone
  shell: ufw allow {{item.port}}/{{item.proto}}
  args:
    warn: no
  with_items: "{{firewall_items}}"
  when: firewall == "ufw"
  tags:
  - firewall

- name: Enabling firewall service
  systemd: enabled=yes state=restarted daemon_reload=yes name=firewalld
  tags:
  - firewall
  when: firewall == "firewalld"

- name: Enabling firewall service
  systemd: enabled=yes state=restarted daemon_reload=yes name=ufw
  tags:
  - firewall
  when: firewall == "ufw"

- name: Enabling firewall service
  shell: "echo 'y' | sudo ufw enable"
  tags:
  - firewall
  when: firewall == "ufw"

- name: Display firewall rules
  command: ufw status numbered
  register: ufw_status_output

- name: Display firewall rules
  debug:
    msg: "{{ufw_status_output.stdout}}"

- name: Enabling firewall service
  systemd: enabled=yes state=restarted daemon_reload=yes name=iptables
  tags:
  - firewall
  when: firewall == "iptables"

#----------------------------------------------------------------------------------
# security <=======================================================================
#----------------------------------------------------------------------------------
- name: Installing security packages
  package: name={{item}} state=present
  with_items:
  - fail2ban
  - sshguard
  - rkhunter
  #    - aide
  notify: cleaning_packages_metadata
  tags:
  - security
  - firewall

- name: Installing security packages
  package: name={{item}} state=present
  with_items:
  - ca-certificates-cacert
  - logdigest
  notify: cleaning_packages_metadata
  when: ansible_distribution_file_variety == "SUSE"
  tags:
  - security
  - firewall

- name: Installing security packages
  package: name={{item}} state=present
  with_items:
  - ca-certificates
  - logcheck
  notify: cleaning_packages_metadata
  when: ansible_distribution == 'Debian'
  tags:
  - security
  - firewall

- name: Copying fail2ban configuration
  copy:
    src: files/etc/fail2ban
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  tags:
  - security
  - firewall

- name: Setting sshguard configuration
  lineinfile:
    path: /etc/sshguard/sshguard.conf
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^THRESHOLD.*$', line: 'THRESHOLD=10'}
  - {regexp: '^BLOCK_TIME.*$', line: 'BLOCK_TIME=900'}
  tags:
  - security
  - firewall

- name: Checking if sshguard backend library exists in /usr/lib
  stat:
    path: /usr/lib/sshg-fw-{{firewall}}
  register: sshg_lib_result
  tags:
  - security
  - firewall

- name: Checking if sshguard backend library exists in /usr/libexec
  stat:
    path: /usr/libexec/sshg-fw-{{firewall}}
  register: sshg_libexec_result
  tags:
  - security
  - firewall

- name: Setting sshguard backend configuration
  lineinfile:
    path: /etc/sshguard.conf
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^BACKEND.*$', line: 'BACKEND="/usr/lib/sshg-fw-{{firewall}}"'}
  when: sshg_lib_result.stat.exists
  tags:
  - security
  - firewall

- name: Setting sshguard backend configuration
  lineinfile:
    path: /etc/sshguard.conf
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^BACKEND.*$', line: 'BACKEND="/usr/libexec/sshg-fw-{{firewall}}"'}
  when: sshg_libexec_result.stat.exists
  tags:
  - security
  - firewall

- name: Setting fail2ban configuration
  lineinfile:
    path: /etc/fail2ban/fail2ban.conf
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^dbpurgeage.*$', line: 'dbpurgeage = 7d'}
  tags:
  - security
  - firewall

- name: Copying logdigest configuration
  copy:
    src: files/etc/logdigest
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  when: ansible_distribution_file_variety == "SUSE"
  tags:
  - security
  - firewall

- name: Copying logcheck configuration
  copy:
    src: files/etc/logcheck
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  when: ansible_distribution == 'Debian'
  tags:
  - security
  - firewall

- name: Setting logcheck configuration
  lineinfile:
    path: /etc/logcheck/config
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '^SYSADMIN=.*$', line: 'SYSADMIN={{email}}'}
  tags:
  - security
  - firewall

- name: Setting rkhunter configuration
  lineinfile:
    path: /etc/rkhunter.conf
    backup: no
    regexp: "{{item.regexp}}"
    line: "{{item.line}}"
  with_items:
  - {regexp: '[#]?MIRRORS_MODE=.*$', line: 'MIRRORS_MODE=0'}
  - {regexp: '[#]?UPDATE_MIRRORS=.*$', line: 'UPDATE_MIRRORS=1'}
  - {regexp: '[#]?WEB_CMD=.*$', line: 'WEB_CMD=""'}
  tags:
  - security
  - firewall

- name: Updating rkhunter
  shell: rkhunter -q --update
  ignore_errors: True
  tags:
  - security
  - firewall

- name: Copying gnupg configuration
  copy:
    src: files/etc/gnupg
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  tags:
  - security
  - firewall

#----------------------------------------------------------------------------------
# end <============================================================================
#----------------------------------------------------------------------------------
- name: Enabling and restart services
  systemd: enabled=yes state=restarted daemon_reload=yes name={{item}}
  with_items:
  - sshd
  - cron
  tags:
  - always

- name: Sending a test email
  shell: "mail -s 'Test email from host: {{ansible_hostname}}' {{email}} < /dev/null"
  ignore_errors: True
  args:
    warn: no
  tags:
  - always
