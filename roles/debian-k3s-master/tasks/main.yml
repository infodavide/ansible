- name: Copying configuration
  copy:
    src: files/etc/
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  tags:
  - install
  - update

- name: Setting scripts permissions
  shell: "chmod 777 /etc/admin/*.sh"
  ignore_errors: True
  args:
    warn: no
  tags:
  - install
  - update

- name: Updating packages
  shell: apt-get update -y && apt-get upgrade -y
  when: ansible_distribution == 'Debian'
  ignore_errors: True
  args:
    warn: no
  notify: cleaning_packages_metadata
  tags:
  - install

- name: Creating the k3s group
  group:
    name: k3s
  tags:
  - install
  - configure

- name: Creating the k3s user to be able to exchange files on the cluster for configuration
  user:
    name: "{{k3s_user}}"
    shell: /bin/bash
    home: /opt/{{k3s_user}}
    system: true
    password: "{{k3s_password | password_hash('sha512')}}"
    group: k3s
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
  tags:
  - install
  - configure

- name: Checking if k3s is already installed
  command: which k3s
  changed_when: false
  ignore_errors: true
  register: k3s_check_command
  tags:
  - install

- name: Displaying k3s check command
  debug:
    var: k3s_check_command
  tags:
  - install

- name: Checking k3s status
  fail:
    msg: "k3s is not installed"
  when: k3s_check_command.rc != 0
  ignore_errors: true
  tags:
  - install

- name: Storing status in variable
  set_fact:
    k3s_installation_status: "{{k3s_check_command.rc == 0}}"
  tags:
  - install

- name: Displaying k3s installation status
  debug:
    var: k3s_installation_status
  tags:
  - install

- name: Creating K3S directory
  file:
    path: "/etc/rancher/k3s"
    state: directory
  tags:
  - install

- name: Copying configuration
  copy:
    src: files/etc/
    dest: /etc/
    owner: root
    group: root
    mode: 0664
  when: not k3s_installation_status
  tags:
  - install

- name: Removing packages
  package: name={{item}} state=present
  when: ansible_distribution == 'Debian'
  with_items:
  - bluetooth
  - fail2ban
  - sshguard
  notify: cleaning_packages_metadata
  tags:
  - install

- name: Installing packages
  package: name={{item}} state=present
  when: ansible_distribution == 'Debian'
  with_items:
  - curl
  - sshpass
  notify: cleaning_packages_metadata
  tags:
  - install

- name: Installing
  shell: "curl --connect-timeout 5 -sfL {{k3s_url}} | INSTALL_K3S_EXEC='server' sh -s"
  ignore_errors: False
  args:
    chdir: /tmp
    warn: no
  when: not k3s_installation_status
  tags:
  - install

- name: Installing
  shell: "systemctl status k3s"
  ignore_errors: False
  args:
    chdir: /tmp
    warn: no
  tags:
  - install

- name: "Retrieving IPv4 of interface: {{network_interface}}"
  shell: "ip addr show|grep -a3 {{network_interface}}|grep -v inet6|grep inet|cut -d/ -f1|awk '{print $2}'| sed 's/\\s*//'"
  register: ip_v4
  ignore_errors: False
  args:
    chdir: /tmp
    warn: no
  tags:
  - install
  - configure

- name: Displaying IPv4
  debug:
    var: ip_v4
  tags:
  - install
  - configure

- name: Creating aliases
  shell: "touch /etc/profile.d/00-aliases.sh && chown root.root /etc/profile.d/00-aliases.sh && chmod 776 /etc/profile.d/00-aliases.sh"
  ignore_errors: False
  args:
    chdir: /tmp
    warn: no
  tags:
  - install
  - configure

- name: Updating global aliases
  lineinfile:
    path: /etc/profile.d/00-aliases.sh
    backup: no
    line: "{{item}}"
    state: present
  with_items:
  - "alias k='kubectl'"
  - "complete -o default -F __start_kubectl k"
  - "source <(kubectl completion bash)"
  tags:
  - install
  - configure

- name: Exporting KUBECONFIG environment variable
  lineinfile:
    path: /etc/profile
    backup: no
    line: "{{item}}"
    state: present
  with_items:
  - "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml"
  tags:
  - always
  - install
  - configure

- name: "Configuring to listen on interface: {{network_interface}}"
  shell: "export KUBECONFIG=/etc/rancher/k3s/k3s.yaml && kubectl config set-cluster default --server=https://{{ip_v4.stdout}}:6443"
  ignore_errors: False
  args:
    chdir: /tmp
    warn: no
  tags:
  - install
  - configure

- name: Configuring
  replace:
    path: /etc/rancher/k3s/k3s.yaml
    regexp: "{{item.regexp}}"
    replace: "{{item.replace}}"
  with_items:
  - {regexp: 'server:\s*https:\/\/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:6443', replace: 'server: https://{{ip_v4.stdout}}:6443'}
  tags:
  - install
  - configure

- name: Setting environment configuration
  file:
    path: /etc/systemd/system/k3s.service.env
    state: file
  tags:
  - install
  - configure

- name: Exporting K3S_KUBECONFIG_MODE variable
  lineinfile:
    path: /etc/systemd/system/k3s.service.env
    backup: no
    line: "{{item}}"
    state: present
  with_items:
  - "K3S_KUBECONFIG_MODE=\"644\""
  tags:
  - install
  - configure

- name: Creating /root/.kube directory
  file:
    path: /root/.kube
    state: directory
  tags:
  - install
  - configure

- name: "Setting configuration into .kube directory"
  shell: "kubectl config view --raw>~/.kube/config"
  ignore_errors: False
  args:
    chdir: /tmp
    warn: no
  tags:
  - install
  - configure

- name: Rebooting the server
  shell: "sleep 4 && reboot"
  async: 1
  poll: 0
  tags:
  - install

- name: Waiting for the reboot to complete if there was a change.
  wait_for_connection:
    connect_timeout: 10
    sleep: 5
    delay: 5
    timeout: 300
  tags:
  - install

- name: Checking if Cilium is installed
  shell: cilium version
  register: cilium_version
  changed_when: false
  ignore_errors: true
  tags:
  - install
  - cilium

- name: Displaying Cilium version
  debug:
    var: cilium_version.stdout_lines
  tags:
  - install
  - cilium

- name: Getting Cilium version
  shell: curl --connect-timeout 5 -s {{cilium_version_url}}
  when: cilium_version.rc != 0
  register: cilium_cli_version
  tags:
  - install
  - cilium

- name: Displaying Cilium version
  debug:
    var: cilium_cli_version
  when: cilium_version.rc != 0

- name: Setting Cilium variables
  set_fact:
    current_os: "{{ansible_system|lower}}"
    current_arch: "{{'amd64' if ansible_architecture == 'x86_64' else 'arm64'}}"
    cilium_cli_version: "{{cilium_cli_version.stdout|trim}}"
  when: cilium_version.rc != 0
  tags:
  - install
  - cilium

- name: Downloading Cilium tarball and checksum
  get_url:
    url: "{{cilium_url}}/{{cilium_cli_version}}/cilium-{{current_os}}-{{current_arch}}.tar.gz"
    dest: "/tmp/cilium-{{current_os}}-{{current_arch}}.tar.gz"
  when: cilium_version.rc != 0
  register: cilium_tarball
  tags:
  - install
  - cilium

- name: Downloading Cilium checksum
  get_url:
    url: "{{cilium_url}}/{{cilium_cli_version}}/cilium-{{current_os}}-{{current_arch}}.tar.gz.sha256sum"
    dest: "/tmp/cilium-{{current_os}}-{{current_arch}}.tar.gz.sha256sum"
  when: cilium_version.rc != 0
  register: cilium_checksum
  tags:
  - install
  - cilium

- name: Verifying Cilium tarball checksum
  shell: "sha256sum -c /tmp/cilium-{{current_os}}-{{current_arch}}.tar.gz.sha256sum"
  args:
    chdir: "/tmp"
  when: cilium_version.rc != 0
  register: checksum_result
  changed_when: false
  tags:
  - install
  - cilium

- name: Extracting Cilium tarball
  unarchive:
    src: "/tmp/cilium-{{current_os}}-{{current_arch}}.tar.gz"
    dest: /usr/local/bin
    remote_src: true
    creates: "/usr/local/bin/cilium"
  when: cilium_version.rc != 0 and checksum_result.rc == 0
  tags:
  - install
  - cilium

- name: Cleaning up Cilium tarball and checksum
  file:
    path: "/tmp/cilium-{{current_os}}-{{current_arch}}.tar.gz"
    state: absent
  when: cilium_version.rc != 0 and checksum_result.rc == 0
  tags:
  - install
  - cilium

- name: Cleaning up Cilium checksum
  file:
    path: "/tmp/cilium-{{current_os}}-{{current_arch}}.tar.gz.sha256sum"
    state: absent
  when: cilium_version.rc != 0 and checksum_result.rc == 0
  tags:
  - install
  - cilium

- name: Installing Cilium
  command: cilium install
  when: cilium_version.rc != 0
  tags:
  - install
  - cilium

- name: Installing Cilium Hubble observability
  command: cilium hubble enable
  tags:
  - install
  - cilium

- name: Checking if Helm is installed
  shell: helm version --short
  register: helm_version
  changed_when: false
  ignore_errors: true
  tags:
  - install
  - helm

- name: Displaying Helm version
  debug:
    var: helm_version.stdout_lines
  tags:
  - install
  - helm

- name: Downloading Helm
  get_url:
    url: "{{helm_url}}"
    dest: /tmp/helm.tar.gz
    checksum: "{{helm_checksum}}"
  when: helm_version.rc != 0
  tags:
  - install
  - helm

- name: Extracting Helm
  unarchive:
    src: /tmp/helm.tar.gz
    dest: /tmp
    remote_src: true
  when: helm_version.rc != 0
  tags:
  - install
  - helm

- name: Moving Helm binary to /usr/local/bin
  command: mv /tmp/linux-amd64/helm /usr/local/bin/helm
  when: helm_version.rc != 0
  tags:
  - install
  - helm

- name: Cleaning up Helm files
  file:
    path: /tmp/helm.tar.gz
    state: absent
  tags:
  - install
  - helm

- name: Checking if /etc/bash_completion.d/ exists
  stat:
    path: /etc/bash_completion.d/
  register: bash_completion_dir
  tags:
  - install
  - helm

- name: Creating /etc/bash_completion.d/ directory
  file:
    path: /etc/bash_completion.d/
    state: directory
  when: not bash_completion_dir.stat.exists
  tags:
  - install
  - helm

- name: Checking if Helm Bash Completion file exists
  stat:
    path: /etc/bash_completion.d/helm
  register: helm_completion_file
  tags:
  - install
  - helm

- name: Installing Helm Bash Completion
  shell: helm completion bash | sudo tee /etc/bash_completion.d/helm
  when: not helm_completion_file.stat.exists
  tags:
  - install
  - helm

- name: Installing Traefik
  shell: "helm repo add traefik https://traefik.github.io/charts && helm repo update"
  tags:
  - install
  - traefik

- name: Installing Traefik
  shell: "helm install --namespace kube-system traefik traefik/traefik"
  tags:
  - install
  - traefik

- name: Retrieving node token
  shell: "cat /var/lib/rancher/k3s/server/node-token"
  register: k3s_node_token
  tags:
  - install

- name: Displaying node token
  debug:
    var: k3s_node_token
  tags:
  - install

- name: Restarting services
  systemd: enabled=yes state=restarted daemon_reload=yes name={{item}}
  with_items:
  - k3s
  tags:
  - install
  - configure
